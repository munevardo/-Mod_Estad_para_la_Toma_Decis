library(htmlwidgets)
library(skimr)
install.packages("devtools") # solo la primera vez
devtools::install_github("centromagis/paqueteMODELOS", force =TRUE)
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
#install.packages("devtools") # solo la primera vez
devtools::install_github("centromagis/paqueteMODELOS", force =TRUE)
library(paqueteMODELOS)
install.packages("GGally")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
devtools::install_github("centromagis/paqueteMODELOS", force =TRUE)
library(paqueteMODELOS)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
install.packages("GGally")
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
install.packages("ggplot2")
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
devtools::install_github("centromagis/paqueteMODELOS", force =TRUE)
library(paqueteMODELOS)
data("rotacion")
install.packages("ggplot2")
library(GGally)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
devtools::install_github("centromagis/paqueteMODELOS", force =TRUE)
library(paqueteMODELOS)
data("rotacion")
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(paqueteMODELOS)
data("rotacion")
library(paqueteMODELOS)
library(dplyr)
data("rotacion")
glimpse(rotacion)
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
library(readr)
library(dplyr)
library(ggplot2)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(paqueteMODELOS)
data("rotacion")
head(rotacion)
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
install.packages("ggplot2")
library(readr)
library(dplyr)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(paqueteMODELOS)
data("rotacion")
head(rotacion)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(paqueteMODELOS)
data("rotacion")
head(rotacion)
# Contar el número total de filas completamente duplicadas
numero_duplicados <- sum(duplicated(rotacion))
print(paste("Se encontraron", numero_duplicados, "filas completamente duplicadas."))
duplicados_col <- duplicated(vivienda_exportada[, c("Rotación", "Edad ")])
duplicados_col <- duplicated(vivienda_exportada[, ("Rotación", "Edad ")])
duplicados_col <- duplicated(vivienda_exportada[, c("Rotación","Edad")])
duplicados_col <- duplicated(rotacion[, c("Rotación","Edad")])
duplicadas_x_columna[duplicados_col, ]
colSums(is.na(rotacion))
head(rotacion)
summary(rotacion)
summary(rotacion)
head(rotacion)
head(rotacion)
tail(rotacion)
skimr::skim(rotacion)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(df))
# Total de NA en el dataset
sum(is.na(df))
sum(rotacion) == "", na.rm = TRUE)
sum(is.infinite(as.matrix(rotacion)))
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
sum(df == "", na.rm = TRUE)
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
sum(df == "", na.rm = TRUE)
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
#sum(df == "", na.rm = TRUE)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
df[!complete.cases(rotacion), ]
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
#sum(df == "", na.rm = TRUE)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
df[!complete.cases(rotacion), ]
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
#sum(df == "", na.rm = TRUE)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
df[!complete.cases(Distancia_Casa), ]
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
#sum(df == "", na.rm = TRUE)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
df[!complete.cases(rotacion$Distancia_Casa), ]
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
#sum(df == "", na.rm = TRUE)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
rotacion[!complete.cases(rotacion$Distancia_Casa), ]
#rotacion
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
# Total de cadenas vacías
#sum(df == "", na.rm = TRUE)
# Total de NA en el dataset
sum(is.na(df))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
rotacion[!complete.cases(rotacion), ]
# Total de NA en el dataset
sum(is.na(rotacion))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
df[!complete.cases(rotacion), ]
# Total de NA en el dataset
sum(is.na(rotacion))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
rotacion[!complete.cases(rotacion), ]
# Total de NA en el dataset
sum(is.na(rotacion))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
rotacion[!complete.cases(rotacion), ]
# Total de cadenas vacías
sum(rotacion == "", na.rm = TRUE)
# Por columna
sapply(rotacion, function(x) sum(x == "", na.rm = TRUE))
# Filas que tienen al menos un campo vacío
df[apply(rotacion == "", 1, any),
# Total de cadenas vacías
sum(rotacion == "", na.rm = TRUE)
# Por columna
sapply(rotacion, function(x) sum(x == "", na.rm = TRUE))
# Filas que tienen al menos un campo vacío
rotacion[apply(rotacion == "", 1, any),
# Total de cadenas vacías
sum(rotacion == "", na.rm = TRUE)
# Por columna
sapply(rotacion, function(x) sum(x == "", na.rm = TRUE))
# Total de cadenas vacías
sum(rotacion == "", na.rm = TRUE)
# Por columna
sapply(rotacion, function(x) sum(x == "", na.rm = TRUE))
# Total de NA en el dataset
sum(is.na(rotacion))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
rotacion[!complete.cases(rotacion), ]
# Contar el número total de filas completamente duplicadas
numero_duplicados <- sum(duplicated(rotacion))
print(paste("Se encontraron", numero_duplicados, "filas completamente duplicadas."))
boxplot(edad ~ rotacion,
data = df,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
boxplot(edad ~ rotacion,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
boxplot(edad ~ rotacion,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
boxplot(Edad ~ rotacion,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
library(ggplot2)
ggplot(df, aes(x = factor(rotacion), y = edad, fill = factor(rotacion))) +
geom_boxplot(alpha = 0.7, outlier.color = "red") +
labs(title = "Relación entre Edad y Rotación",
x = "Rotación",
y = "Edad") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "lightgreen"))
boxplot(Edad ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
boxplot(Ingreso_Mensual ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual"
yaxt = "n")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual"
yaxt = "1'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "n'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "10'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "5'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "n'")
# Personalizamos el eje Y con saltos de 1 en 1
axis(side = 2, at = seq(0, max(rotacion$Años_Experiencia, na.rm = TRUE), by = 1))
# Edad según Departamento
boxplot(Edad ~ Departamento, data = rotacion,
col = "skyblue",
main = "Distribución de Edad según Departamento",
xlab = "Departamento", ylab = "Edad")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Nivel_Educativo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Nivel Educativo", ylab = "Ingreso Mensual")
# Años de experiencia según Estado Civil
boxplot(Años_Experiencia ~ Estado_Civil, data = rotacion,
col = "lightpink",
main = "Distribución de Experiencia según Estado Civil",
xlab = "Estado Civil", ylab = "Años de Experiencia")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Nivel_Educativo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Nivel Educativo", ylab = "Ingreso Mensual")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Cargo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Nivel Educativo", ylab = "Ingreso Mensual")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Cargo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Cargo", ylab = "Ingreso Mensual")
# Variables categóricas
# Frecuencia de la variable de rotación
rotacion %>%
count(Rotación) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Departamento
rotacion %>%
count(Departamento) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Cargo
rotacion %>%
count(Cargo) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Horas_Extra
rotacion %>%
count(Horas_Extra) %>%
mutate(Proporción = n / sum(n))
# Variables cuantitativas
# Histograma de la Edad
hist(rotacion$Edad, main = "Distribución de la Edad", xlab = "Edad", col = "skyblue")
# Histograma del Ingreso_Mensual
hist(rotacion$Ingreso_Mensual, main = "Distribución del Ingreso Mensual", xlab = "Ingreso Mensual", col = "lightgreen")
# Histograma de la Antigüedad
hist(rotacion$Antigüedad, main = "Distribución de la Antigüedad", xlab = "Antigüedad", col = "salmon")
# Variables categóricas
# Frecuencia de la variable de rotación
rotacion %>%
count(Rotación) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Departamento
rotacion %>%
count(Departamento) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Cargo
rotacion %>%
count(Cargo) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Horas_Extra
rotacion %>%
count(Horas_Extra) %>%
mutate(Proporción = n / sum(n))
# Variables cuantitativas
# Histograma de la Edad
hist(rotacion$Edad, main = "Distribución de la Edad", xlab = "Edad", col = "skyblue")
# Histograma del Ingreso_Mensual
hist(rotacion$Ingreso_Mensual, main = "Distribución del Ingreso Mensual", xlab = "Ingreso Mensual", col = "lightgreen")
# Histograma de la Antigüedad
hist(rotacion$Antigüedad, main = "Distribución de la Antigüedad", xlab = "Antigüedad", col = "salmon")
# Boxplot: Edad vs. Rotación
boxplot(Edad ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
# Boxplot: Ingreso_Mensual vs. Rotación
boxplot(Ingreso_Mensual ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Ingreso Mensual según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
# Boxplot: Años_Experiencia vs. Rotación
boxplot(Años_Experiencia ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Años de Experiencia")
