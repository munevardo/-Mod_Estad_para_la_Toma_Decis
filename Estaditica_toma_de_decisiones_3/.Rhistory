xlab = "Rotación",
ylab = "Edad")
boxplot(Edad ~ rotacion,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
library(ggplot2)
ggplot(df, aes(x = factor(rotacion), y = edad, fill = factor(rotacion))) +
geom_boxplot(alpha = 0.7, outlier.color = "red") +
labs(title = "Relación entre Edad y Rotación",
x = "Rotación",
y = "Edad") +
theme_minimal() +
scale_fill_manual(values = c("skyblue", "lightgreen"))
boxplot(Edad ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
boxplot(Ingreso_Mensual ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual"
yaxt = "n")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual"
yaxt = "1'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "n'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "10'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "5'")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "n'")
# Personalizamos el eje Y con saltos de 1 en 1
axis(side = 2, at = seq(0, max(rotacion$Años_Experiencia, na.rm = TRUE), by = 1))
# Edad según Departamento
boxplot(Edad ~ Departamento, data = rotacion,
col = "skyblue",
main = "Distribución de Edad según Departamento",
xlab = "Departamento", ylab = "Edad")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Nivel_Educativo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Nivel Educativo", ylab = "Ingreso Mensual")
# Años de experiencia según Estado Civil
boxplot(Años_Experiencia ~ Estado_Civil, data = rotacion,
col = "lightpink",
main = "Distribución de Experiencia según Estado Civil",
xlab = "Estado Civil", ylab = "Años de Experiencia")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Nivel_Educativo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Nivel Educativo", ylab = "Ingreso Mensual")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Cargo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Nivel Educativo", ylab = "Ingreso Mensual")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Cargo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Cargo", ylab = "Ingreso Mensual")
# Variables categóricas
# Frecuencia de la variable de rotación
rotacion %>%
count(Rotación) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Departamento
rotacion %>%
count(Departamento) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Cargo
rotacion %>%
count(Cargo) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Horas_Extra
rotacion %>%
count(Horas_Extra) %>%
mutate(Proporción = n / sum(n))
# Variables cuantitativas
# Histograma de la Edad
hist(rotacion$Edad, main = "Distribución de la Edad", xlab = "Edad", col = "skyblue")
# Histograma del Ingreso_Mensual
hist(rotacion$Ingreso_Mensual, main = "Distribución del Ingreso Mensual", xlab = "Ingreso Mensual", col = "lightgreen")
# Histograma de la Antigüedad
hist(rotacion$Antigüedad, main = "Distribución de la Antigüedad", xlab = "Antigüedad", col = "salmon")
# Variables categóricas
# Frecuencia de la variable de rotación
rotacion %>%
count(Rotación) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Departamento
rotacion %>%
count(Departamento) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Cargo
rotacion %>%
count(Cargo) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Horas_Extra
rotacion %>%
count(Horas_Extra) %>%
mutate(Proporción = n / sum(n))
# Variables cuantitativas
# Histograma de la Edad
hist(rotacion$Edad, main = "Distribución de la Edad", xlab = "Edad", col = "skyblue")
# Histograma del Ingreso_Mensual
hist(rotacion$Ingreso_Mensual, main = "Distribución del Ingreso Mensual", xlab = "Ingreso Mensual", col = "lightgreen")
# Histograma de la Antigüedad
hist(rotacion$Antigüedad, main = "Distribución de la Antigüedad", xlab = "Antigüedad", col = "salmon")
# Boxplot: Edad vs. Rotación
boxplot(Edad ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
# Boxplot: Ingreso_Mensual vs. Rotación
boxplot(Ingreso_Mensual ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Ingreso Mensual según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
# Boxplot: Años_Experiencia vs. Rotación
boxplot(Años_Experiencia ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Años de Experiencia")
knitr::opts_chunk$set(echo = TRUE)
install.packages("pROC")
library(readr)
library(dplyr)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(pROC)
library(paqueteMODELOS)
data("rotacion")
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
knitr::opts_chunk$set(echo = TRUE)
install.packages("pROC")
library(readr)
library(dplyr)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(pROC)
library(paqueteMODELOS)
data("rotacion")
install.packages("pROC")
library(paqueteMODELOS)
library(dplyr)
data("rotacion")
glimpse(rotacion)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(dplyr)
library(plotly)
library(sf) # Para trabajar con datos espaciales
library(leaflet) # Para mapas interactivos
library(htmlwidgets)
library(skimr)
library(GGally)
library(pROC)
library(paqueteMODELOS)
data("rotacion")
library(paqueteMODELOS)
library(dplyr)
data("rotacion")
glimpse(rotacion)
summary(rotacion)
head(rotacion)
tail(rotacion)
skimr::skim(rotacion)
# Contar el número total de filas completamente duplicadas
numero_duplicados <- sum(duplicated(rotacion))
print(paste("Se encontraron", numero_duplicados, "filas completamente duplicadas."))
# Total de NA en el dataset
sum(is.na(rotacion))
# NA por columna
colSums(is.na(rotacion))
# Filas con NA
rotacion[!complete.cases(rotacion), ]
# Total de cadenas vacías
sum(rotacion == "", na.rm = TRUE)
# Por columna
sapply(rotacion, function(x) sum(x == "", na.rm = TRUE))
# Inf o -Inf
sum(is.infinite(as.matrix(rotacion)))
# NaN
sum(is.nan(as.matrix(rotacion)))
boxplot(Edad ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
boxplot(Ingreso_Mensual ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
boxplot(Años_Experiencia ~ Rotación,
data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual",
yaxt = "n'")
# Personalizamos el eje Y con saltos de 1 en 1
axis(side = 2, at = seq(0, max(rotacion$Años_Experiencia, na.rm = TRUE), by = 1))
# Edad según Departamento
boxplot(Edad ~ Departamento, data = rotacion,
col = "skyblue",
main = "Distribución de Edad según Departamento",
xlab = "Departamento", ylab = "Edad")
# Ingreso mensual según Nivel educativo
boxplot(Ingreso_Mensual ~ Cargo, data = rotacion,
col = "lightgreen",
main = "Distribución de Ingreso según Nivel Educativo",
xlab = "Cargo", ylab = "Ingreso Mensual")
# Años de experiencia según Estado Civil
boxplot(Años_Experiencia ~ Estado_Civil, data = rotacion,
col = "lightpink",
main = "Distribución de Experiencia según Estado Civil",
xlab = "Estado Civil", ylab = "Años de Experiencia")
# Variables categóricas
# Frecuencia de la variable de rotación
rotacion %>%
count(Rotación) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Departamento
rotacion %>%
count(Departamento) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Cargo
rotacion %>%
count(Cargo) %>%
mutate(Proporción = n / sum(n))
# Frecuencia de la variable Horas_Extra
rotacion %>%
count(Horas_Extra) %>%
mutate(Proporción = n / sum(n))
# Variables cuantitativas
# Histograma de la Edad
hist(rotacion$Edad, main = "Distribución de la Edad", xlab = "Edad", col = "skyblue")
# Histograma del Ingreso_Mensual
hist(rotacion$Ingreso_Mensual, main = "Distribución del Ingreso Mensual", xlab = "Ingreso Mensual", col = "lightgreen")
# Histograma de la Antigüedad
hist(rotacion$Antigüedad, main = "Distribución de la Antigüedad", xlab = "Antigüedad", col = "salmon")
# Boxplot: Edad vs. Rotación
boxplot(Edad ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Edad según Rotación",
xlab = "Rotación",
ylab = "Edad")
# Boxplot: Ingreso_Mensual vs. Rotación
boxplot(Ingreso_Mensual ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Ingreso Mensual según Rotación",
xlab = "Rotación",
ylab = "Ingreso Mensual")
# Boxplot: Años_Experiencia vs. Rotación
boxplot(Años_Experiencia ~ Rotación, data = rotacion,
col = c("skyblue", "lightgreen"),
main = "Distribución de Años de Experiencia según Rotación",
xlab = "Rotación",
ylab = "Años de Experiencia")
# Convertir la variable de respuesta a factor y luego a numérico (0, 1)
rotacion <- rotacion %>%
mutate(rotacion_numerica = ifelse(Rotación == "Si", 1, 0))
covariables <- c("Edad", "Ingreso_Mensual", "Años_Experiencia",
"Departamento", "Estado_Civil", "Horas_Extra")
# Ajustar el modelo de regresión logística
modelo_logistico <- glm(rotacion_numerica ~ Edad + Ingreso_Mensual +
Años_Experiencia + Departamento + Estado_Civil +
Horas_Extra,
data = rotacion,
family = binomial(link = "logit"))
summary(modelo_logistico)
# Interpretar los coeficientes usando Odds Ratio (OR)
# Extraer los coeficientes del modelo y calcular exp(coeficientes)
or_values <- exp(coef(modelo_logistico))
or_table <- data.frame(OR = or_values,
p_value = summary(modelo_logistico)$coefficients[,4])
print("Tabla de Odds Ratios (OR) y p-valores:")
print(or_table)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
predicciones
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_objt <- roc(rotacion$Rotación, predicciones)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_objt <- roc(rotacion$rotacion, predicciones)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_objt <- roc(rotacion]$rotacion_numerica, predicciones)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_objt <- roc(rotacion$rotacion_numerica, predicciones)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_objt <- roc(rotacion$rotacion_numerica, predicciones)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_objt <- roc(rotacion$rotacion_numerica, predicciones)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# Trazar la curva ROC
plot(roc_obj,
main = "Curva ROC del Modelo de Regresión Logística",
col = "#1c61b6",
lwd = 2,
print.auc = TRUE,
print.auc.x = 0.5,
print.auc.y = 0.5,
ci = TRUE,
legacy.axes = TRUE)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# Trazar la curva ROC
plot(roc_obj,
main = "Curva ROC del Modelo de Regresión Logística",
col = "#1c61b6",
lwd = 2,
print.auc = TRUE,
print.auc.x = 0.5,
print.auc.y = 0.5,
ci = TRUE,
legacy.axes = TRUE)
table(rotacion$rotacion_numerica)
sum(is.na(rotacion$rotacion_numerica))
# Revisa si hay valores NA en las predicciones
sum(is.na(predicciones))
# Revisa si hay valores infinitos
sum(is.infinite(predicciones))
range(predicciones)
# Asegúrate de ejecutar esta línea y de que no arroje ningún error
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Trazar la curva ROC
plot(roc_obj,
main = "Curva ROC del Modelo de Regresión Logística",
col = "#1c61b6",
lwd = 2,
print.auc = TRUE,
print.auc.x = 0.5,
print.auc.y = 0.5,
ci = TRUE,
legacy.axes = TRUE)
# Trazar la curva ROC
plot(roc_obj,
main = "Curva ROC del Modelo de Regresión Logística",
col = "#1c61b6",
lwd = 2,
print.auc = TRUE,
print.auc.x = 0.5,
print.auc.y = 0.5,
ci = TRUE,
legacy.axes = TRUE)
# Intenta trazar la curva ROC con la configuración más básica
plot(roc_obj)
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Intenta trazar la curva ROC con la configuración más básica
plot(roc_obj)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Intenta trazar la curva ROC con la configuración más básica
plot(roc_obj)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# calcular las probabilidades predichas por el modelo
predicciones <- predict(modelo_logistico, type  = "response")
# creación del objeto ROC
roc_obj <- roc(rotacion$rotacion_numerica, predicciones)
# Intenta trazar la curva ROC con la configuración más básica
plot(roc_obj)
# Imprimir el valor del AUC
print("El valor del AUC es:")
print(auc(roc_obj))
# 1. Definir un individuo hipotético (nuevo data.frame)
# Asegúrate de que las variables categóricas tengan los mismos niveles que los datos de entrenamiento
nuevo_empleado <- data.frame(
Edad = 28,
Ingreso_Mensual = 3500,
Años_Experiencia = 3,
Departamento = "Ventas",
Estado_Civil = "Soltero",
Horas_Extra = "Si"
)
# Para que las variables categóricas sean reconocidas, se convierten a factor
nuevo_empleado$Departamento <- as.factor(nuevo_empleado$Departamento)
nuevo_empleado$Estado_Civil <- as.factor(nuevo_empleado$Estado_Civil)
nuevo_empleado$Horas_Extra <- as.factor(nuevo_empleado$Horas_Extra)
# 2. Realizar la predicción
# El argumento 'type = "response"' devuelve la probabilidad
probabilidad_rotacion <- predict(modelo_logistico, newdata = nuevo_empleado, type = "response")
# 3. Definir un punto de corte para la estrategia
punto_corte <- 0.5 # Puedes ajustar este valor según la necesidad de la empresa
# 4. Implementar la estrategia
if (probabilidad_rotacion >= punto_corte) {
estrategia <- "Se recomienda una intervención. El empleado está en alto riesgo de rotar."
} else {
estrategia <- "El empleado no parece estar en alto riesgo de rotar."
}
# 5. Imprimir los resultados
print(paste("La probabilidad de rotación para este empleado es:", round(probabilidad_rotacion, 4)))
print(paste("Estrategia recomendada:", estrategia))
# =========================================================================
# Ejemplo de salida:
# "La probabilidad de rotación para este empleado es: 0.65"
# "Estrategia recomendada: Se recomienda una intervención. El empleado está en alto riesgo de rotar."
